// <auto-generated />
using Eventodo.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eventodo.Infrastructure.Migrations
{
    [DbContext(typeof(EventodoDbContext))]
    partial class EventodoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("ModuleSequence");

            modelBuilder.Entity("Eventodo.Core.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Woodstock",
                            Url = "woodstock"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Open'er",
                            Url = "open-er"
                        });
                });

            modelBuilder.Entity("Eventodo.Core.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"ModuleSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Eventodo.Core.Modules.ModuleAgenda", b =>
                {
                    b.HasBaseType("Eventodo.Core.Module");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.ToTable("ModulesAgenda");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            Title = "Agenda1",
                            Day = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            Title = "Agenda2",
                            Day = 2
                        });
                });

            modelBuilder.Entity("Eventodo.Core.Modules.ModuleGalery", b =>
                {
                    b.HasBaseType("Eventodo.Core.Module");

                    b.Property<string>("Elements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("ModulesGalery");
                });

            modelBuilder.Entity("Eventodo.Core.Module", b =>
                {
                    b.HasOne("Eventodo.Core.Event", "Event")
                        .WithMany("Modules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Eventodo.Core.Event", b =>
                {
                    b.Navigation("Modules");
                });
#pragma warning restore 612, 618
        }
    }
}
